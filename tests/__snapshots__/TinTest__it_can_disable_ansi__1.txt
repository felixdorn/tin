  1 | <?php
  2 | 
  3 | declare(ticks=0);
  4 | 
  5 | namespace A {
  6 |     function abc()
  7 |     {
  8 |     }
  9 | }
 10 | 
 11 | namespace {
 12 |     use function A\abc;
 13 |     use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
 14 | 
 15 |     abc();
 16 | 
 17 |     $a = 1;
 18 |     $a = 0xEF;
 19 |     $a = 1_000_000;
 20 | 
 21 |     trait G
 22 |     {
 23 |     }
 24 | 
 25 |     trait E
 26 |     {
 27 |     }
 28 | 
 29 |     class A extends B implements C
 30 |     {
 31 |         use E, G {
 32 |             G::a insteadof E;
 33 |             E::b as c;
 34 |         }
 35 | 
 36 |         public const A       = 1;
 37 |         public static int $b = 1;
 38 |         private Closure $c;
 39 | 
 40 |         public function __construct(
 41 |             protected string $a
 42 |         ) {
 43 |             $this->a = $a;
 44 |         }
 45 | 
 46 |         public static function a(?B &$a = null, float|int|C $b = 3, C $c): float|B
 47 |         {
 48 |             return 1.0;
 49 |         }
 50 | 
 51 |         public function x()
 52 |         {
 53 |             foreach ([] as $f) {
 54 |             }
 55 |         }
 56 | 
 57 |         public function b()
 58 |         {
 59 |         }
 60 | 
 61 |         protected function c(): int
 62 |         {
 63 |             return 1;
 64 |         }
 65 |     }
 66 | 
 67 |     if (true && false || !1) {
 68 |         echo 'hey';
 69 |         echo 'oh!';
 70 |     } elseif (1 << 2) {
 71 |         exit(1);
 72 |     } else {
 73 |         isset($a);
 74 |     }
 75 | 
 76 |     const A_CONSTANT = 1;
 77 | 
 78 |     A_CONSTANT + A_CONSTANT;
 79 | 
 80 |     (new A())->b();
 81 | 
 82 |     A::$b;
 83 |     A::A;
 84 |     A::a($a, 1);
 85 | 
 86 |     $c = ' {d}';
 87 | 
 88 |     echo "{$a} and b" . $c;
 89 | 
 90 |     $a = static function () {
 91 |     };
 92 | 
 93 |     #[LanguageLevelTypeAware(['a' => 4], 1)] #[A]
 94 |     #[B]
 95 |     function a(A $a)
 96 |     {
 97 |     }
 98 | 
 99 |     $f = fn ($a): B => 1;
100 | 
101 |     function foo(string $bar)
102 |     {
103 |     }
104 | 
105 |     foo(bar: 'aa')[A::class];
106 | 
107 |     abstract class D
108 |     {
109 |         abstract public function a();
110 |     }
111 | 
112 |     final class X
113 |     {
114 |         public function __construct(
115 |             public readonly int $a
116 |         ) {
117 |         }
118 |     }
119 | 
120 |     enum S: string {
121 |         case A = 'a';
122 |         case B = 'b';
123 |     }
124 | }
