<?php

declare(ticks=0);

namespace A {
    function abc()
    {
    }
}

namespace {
    use function A\abc;
    use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;

    abc();

    $a = 1;
    $a = 0xEF;
    $a = 1_000_000;

    trait G
    {
    }

    trait E
    {
    }

    class A extends B implements C
    {
        use E, G {
            G::a insteadof E;
            E::b as c;
        }

        public const A       = 1;
        public static int $b = 1;
        private Closure $c;

        public function __construct(
            protected string $a
        ) {
            $this->a = $a;
        }

        public static function a(?B &$a = null, float|int|C $b = 3, C $c): float|B
        {
            return 1.0;
        }

        public function x()
        {
            foreach ([] as $f) {
            }
        }

        public function b()
        {
        }

        protected function c(): int
        {
            return 1;
        }
    }

    if (true && false || !1) {
        echo 'hey';
        echo 'oh!';
    } elseif (1 << 2) {
        exit(1);
    } else {
        isset($a);
    }

    const A_CONSTANT = 1;

    A_CONSTANT + A_CONSTANT;

    (new A())->b();

    A::$b;
    A::A;
    A::a($a, 1);

    $c = ' {d}';

    echo "{$a} and b" . $c;

    $a = static function () {
    };

    #[LanguageLevelTypeAware(['a' => 4], 1)] #[A]
    #[B]
    function a(A $a)
    {
    }

    $f = fn ($a): B => 1;

    function foo(string $bar)
    {
    }

    foo(bar: 'aa')[A::class];

    abstract class D
    {
        abstract public function a();
    }

    final class X
    {
        public function __construct(
            public readonly int $a
        ) {
        }
    }

    enum S: string {
        case A = 'a';
        case B = 'b';
    }
}
